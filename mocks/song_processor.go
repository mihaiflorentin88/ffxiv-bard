// Code generated by MockGen. DO NOT EDIT.
// Source: ffxvi-bard/port (interfaces: SongProcessorInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	port "ffxvi-bard/port/contract"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSongProcessorInterface is a mock of SongProcessorInterface interface.
type MockSongProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSongProcessorInterfaceMockRecorder
}

// MockSongProcessorInterfaceMockRecorder is the mock recorder for MockSongProcessorInterface.
type MockSongProcessorInterfaceMockRecorder struct {
	mock *MockSongProcessorInterface
}

// NewMockSongProcessorInterface creates a new mock instance.
func NewMockSongProcessorInterface(ctrl *gomock.Controller) *MockSongProcessorInterface {
	mock := &MockSongProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockSongProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongProcessorInterface) EXPECT() *MockSongProcessorInterfaceMockRecorder {
	return m.recorder
}

// IsCorrectFormat mocks base method.
func (m *MockSongProcessorInterface) IsCorrectFormat() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCorrectFormat")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCorrectFormat indicates an expected call of IsCorrectFormat.
func (mr *MockSongProcessorInterfaceMockRecorder) IsCorrectFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorrectFormat", reflect.TypeOf((*MockSongProcessorInterface)(nil).IsCorrectFormat))
}

// ProcessSong mocks base method.
func (m *MockSongProcessorInterface) ProcessSong(arg0 port.SongInterface) error {
	return nil
}

// ProcessSong indicates an expected call of ProcessSong.
func (mr *MockSongProcessorInterfaceMockRecorder) ProcessSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSong", reflect.TypeOf((*MockSongProcessorInterface)(nil).ProcessSong), arg0)
}

// RemoveUnprocessedSong mocks base method.
func (m *MockSongProcessorInterface) RemoveUnprocessedSong(arg0 port.SongInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUnprocessedSong", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUnprocessedSong indicates an expected call of RemoveUnprocessedSong.
func (mr *MockSongProcessorInterfaceMockRecorder) RemoveUnprocessedSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUnprocessedSong", reflect.TypeOf((*MockSongProcessorInterface)(nil).RemoveUnprocessedSong), arg0)
}

// WriteUnprocessedSong mocks base method.
func (m *MockSongProcessorInterface) WriteUnprocessedSong(arg0 port.SongInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUnprocessedSong", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUnprocessedSong indicates an expected call of WriteUnprocessedSong.
func (mr *MockSongProcessorInterfaceMockRecorder) WriteUnprocessedSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUnprocessedSong", reflect.TypeOf((*MockSongProcessorInterface)(nil).WriteUnprocessedSong), arg0)
}
