// Code generated by MockGen. DO NOT EDIT.
// Source: ffxvi-bard/port (interfaces: SongInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	"ffxvi-bard/port/contract"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSongInterface is a mock of SongInterface interface.
type MockSongInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSongInterfaceMockRecorder
}

// MockSongInterfaceMockRecorder is the mock recorder for MockSongInterface.
type MockSongInterfaceMockRecorder struct {
	mock *MockSongInterface
}

// NewMockSongInterface creates a new mock instance.
func NewMockSongInterface(ctrl *gomock.Controller) *MockSongInterface {
	mock := &MockSongInterface{ctrl: ctrl}
	mock.recorder = &MockSongInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongInterface) EXPECT() *MockSongInterfaceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockSongInterface) AddComment(arg0 contract.CommentInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddComment", arg0)
}

// AddComment indicates an expected call of AddComment.
func (mr *MockSongInterfaceMockRecorder) AddComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockSongInterface)(nil).AddComment), arg0)
}

// ChangeStatus mocks base method.
func (m *MockSongInterface) ChangeStatus(arg0 contract.Status, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeStatus", arg0, arg1)
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockSongInterfaceMockRecorder) ChangeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockSongInterface)(nil).ChangeStatus), arg0, arg1)
}

// ChangeStatusMessage mocks base method.
func (m *MockSongInterface) ChangeStatusMessage(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeStatusMessage", arg0)
}

// ChangeStatusMessage indicates an expected call of ChangeStatusMessage.
func (mr *MockSongInterfaceMockRecorder) ChangeStatusMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatusMessage", reflect.TypeOf((*MockSongInterface)(nil).ChangeStatusMessage), arg0)
}

// EnsembleString mocks base method.
func (m *MockSongInterface) EnsembleString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsembleString")
	ret0, _ := ret[0].(string)
	return ret0
}

// EnsembleString indicates an expected call of EnsembleString.
func (mr *MockSongInterfaceMockRecorder) EnsembleString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsembleString", reflect.TypeOf((*MockSongInterface)(nil).EnsembleString))
}

// GenerateFileCode mocks base method.
func (m *MockSongInterface) GenerateFileCode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GenerateFileCode")
}

// GenerateFileCode indicates an expected call of GenerateFileCode.
func (mr *MockSongInterfaceMockRecorder) GenerateFileCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFileCode", reflect.TypeOf((*MockSongInterface)(nil).GenerateFileCode))
}

// GetAverageRating mocks base method.
func (m *MockSongInterface) GetAverageRating() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageRating")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetAverageRating indicates an expected call of GetAverageRating.
func (mr *MockSongInterfaceMockRecorder) GetAverageRating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageRating", reflect.TypeOf((*MockSongInterface)(nil).GetAverageRating))
}

// GetFile mocks base method.
func (m *MockSongInterface) GetFile() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetFile indicates an expected call of GetFile.
func (mr *MockSongInterfaceMockRecorder) GetFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockSongInterface)(nil).GetFile))
}

// GetFileCode mocks base method.
func (m *MockSongInterface) GetFileCode() string {
	return "test123"
}

// GetFileCode indicates an expected call of GetFileCode.
func (mr *MockSongInterfaceMockRecorder) GetFileCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileCode", reflect.TypeOf((*MockSongInterface)(nil).GetFileCode))
}

// GetStatus mocks base method.
func (m *MockSongInterface) GetStatus() contract.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(contract.Status)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSongInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSongInterface)(nil).GetStatus))
}

// GetStatusMessage mocks base method.
func (m *MockSongInterface) GetStatusMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatusMessage indicates an expected call of GetStatusMessage.
func (mr *MockSongInterfaceMockRecorder) GetStatusMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusMessage", reflect.TypeOf((*MockSongInterface)(nil).GetStatusMessage))
}

// ProcessSong mocks base method.
func (m *MockSongInterface) ProcessSong() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSong")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessSong indicates an expected call of ProcessSong.
func (mr *MockSongInterfaceMockRecorder) ProcessSong() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSong", reflect.TypeOf((*MockSongInterface)(nil).ProcessSong))
}

// RemoveComment mocks base method.
func (m *MockSongInterface) RemoveComment(arg0 contract.CommentInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveComment", arg0)
}

// RemoveComment indicates an expected call of RemoveComment.
func (mr *MockSongInterfaceMockRecorder) RemoveComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveComment", reflect.TypeOf((*MockSongInterface)(nil).RemoveComment), arg0)
}

// StatusString mocks base method.
func (m *MockSongInterface) StatusString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusString")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusString indicates an expected call of StatusString.
func (mr *MockSongInterfaceMockRecorder) StatusString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusString", reflect.TypeOf((*MockSongInterface)(nil).StatusString))
}
